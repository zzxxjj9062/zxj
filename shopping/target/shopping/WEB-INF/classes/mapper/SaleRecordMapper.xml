<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.abovesky.shopping.dao.SaleRecordMapper" >
  <resultMap id="BaseResultMap" type="cn.abovesky.shopping.domain.SaleRecord" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="date" property="date" jdbcType="TIMESTAMP" />
    <result column="number" property="number" jdbcType="INTEGER" />
    <result column="total_price" property="totalPrice" jdbcType="REAL" />
    <result column="goods_id" property="goodsId" jdbcType="INTEGER" />
    <result column="merchant_id" property="merchantId" jdbcType="INTEGER" />
  </resultMap>
    <resultMap id="GoodsResultMap" type="cn.abovesky.shopping.domain.Goods">
        <id column="goodsId" property="id" jdbcType="INTEGER" />
        <result column="goods_name" property="name" jdbcType="VARCHAR" />
        <result column="goods_image" property="image" jdbcType="VARCHAR" />
        <result column="goods_price" property="price" jdbcType="REAL" />
        <result column="goods_number" property="number" jdbcType="INTEGER" />
        <result column="goods_sale_count" property="saleCount" jdbcType="INTEGER" />
        <result column="goods_remark_count" property="remarkCount" jdbcType="INTEGER" />
        <result column="goods_collection_count" property="collectionCount" jdbcType="INTEGER" />
        <association property="merchant" javaType="cn.abovesky.shopping.domain.Merchant">
            <id column="merchantId" property="id" jdbcType="INTEGER" />
            <result column="merchant_store_name" property="storeName" jdbcType="VARCHAR" />
        </association>
    </resultMap>
  <sql id="Base_Column_List" >
    id, date, number, total_price, goods_id, merchant_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sale_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sale_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.abovesky.shopping.domain.SaleRecord" >
    insert into sale_record (id, date, number, 
      total_price, goods_id, merchant_id
      )
    values (#{id,jdbcType=INTEGER}, #{date,jdbcType=TIMESTAMP}, #{number,jdbcType=INTEGER}, 
      #{totalPrice,jdbcType=REAL}, #{goodsId,jdbcType=INTEGER}, #{merchantId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.abovesky.shopping.domain.SaleRecord" >
    insert into sale_record
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="date != null" >
        date,
      </if>
      <if test="number != null" >
        number,
      </if>
      <if test="totalPrice != null" >
        total_price,
      </if>
      <if test="goodsId != null" >
        goods_id,
      </if>
      <if test="merchantId != null" >
        merchant_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="date != null" >
        #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="number != null" >
        #{number,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null" >
        #{totalPrice,jdbcType=REAL},
      </if>
      <if test="goodsId != null" >
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="merchantId != null" >
        #{merchantId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.abovesky.shopping.domain.SaleRecord" >
    update sale_record
    <set >
      <if test="date != null" >
        date = #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="number != null" >
        number = #{number,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null" >
        total_price = #{totalPrice,jdbcType=REAL},
      </if>
      <if test="goodsId != null" >
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="merchantId != null" >
        merchant_id = #{merchantId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.abovesky.shopping.domain.SaleRecord" >
    update sale_record
    set date = #{date,jdbcType=TIMESTAMP},
      number = #{number,jdbcType=INTEGER},
      total_price = #{totalPrice,jdbcType=REAL},
      goods_id = #{goodsId,jdbcType=INTEGER},
      merchant_id = #{merchantId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="countTotalPrice" resultType="java.lang.Float" parameterType="map">
        select sum(total_price)
        from sale_record
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="saleCountDate != null">
                and date > #{saleCountDate}
            </if>
            <if test="merchantId != null">
                and merchant_id = #{merchantId}
            </if>
        </trim>
    </select>
    <select id="countNumber" resultType="java.lang.Integer" parameterType="map">
        select sum(number)
        from sale_record
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="saleCountDate != null">
                and date > #{saleCountDate}
            </if>
            <if test="merchantId != null">
                and merchant_id = #{merchantId}
            </if>
        </trim>
    </select>
    <select id="getGoodsRecommend" resultMap="GoodsResultMap" parameterType="map">
        select
            merchant.id merchantId,
            merchant.store_name merchant_store_name,
            goods.name goods_name,
            goods.id goodsId,
            goods.price goods_price,
            goods.number goods_number,
            goods.image goods_image,
            goods.sale_count goods_sale_count,
            goods.remark_count goods_remark_count,
            goods.collection_count goods_collection_count
        from sale_record
        INNER JOIN goods on (goods.id = sale_record.goods_id and goods.status = 'ACTIVE')
        INNER JOIN merchant on (merchant.id = sale_record.merchant_id and merchant.status = 'ACTIVE')
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="date != null">
                and sale_record.date > #{date}
            </if>
        </trim>
        group by goods_id
        order by sum(sale_record.number) DESC
    </select>
</mapper>