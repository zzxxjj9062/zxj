<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.abovesky.shopping.dao.RemarkMapper" >
  <resultMap id="BaseResultMap" type="cn.abovesky.shopping.domain.Remark" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="date" property="date" jdbcType="TIMESTAMP" />
    <result column="avg_grade" property="avgGrade" jdbcType="REAL" />
    <result column="speed" property="speed" jdbcType="REAL" />
    <result column="quality" property="quality" jdbcType="REAL" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="goods_id" property="goodsId" jdbcType="INTEGER" />
    <result column="merchant_id" property="merchantId" jdbcType="INTEGER" />
      <association property="user" javaType="cn.abovesky.shopping.domain.User">
          <result column="user_nickname" property="nickname"/>
      </association>
      <association property="goods" javaType="cn.abovesky.shopping.domain.Goods">
          <result column="goods_name" property="name"/>
          <association property="merchant" javaType="cn.abovesky.shopping.domain.Merchant">
              <result column="store_name" property="storeName" jdbcType="VARCHAR"/>
          </association>
      </association>
  </resultMap>
  <sql id="Base_Column_List" >
    id, date, avg_grade, speed, quality, content, user_id, goods_id, merchant_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from remark
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from remark
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.abovesky.shopping.domain.Remark" >
    insert into remark (id, date, avg_grade, 
      speed, quality, content, 
      user_id, goods_id, merchant_id
      )
    values (#{id,jdbcType=INTEGER}, #{date,jdbcType=TIMESTAMP}, #{avgGrade,jdbcType=REAL}, 
      #{speed,jdbcType=REAL}, #{quality,jdbcType=REAL}, #{content,jdbcType=VARCHAR}, 
      #{userId,jdbcType=INTEGER}, #{goodsId,jdbcType=INTEGER}, #{merchantId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.abovesky.shopping.domain.Remark" >
    insert into remark
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="date != null" >
        date,
      </if>
      <if test="avgGrade != null" >
        avg_grade,
      </if>
      <if test="speed != null" >
        speed,
      </if>
      <if test="quality != null" >
        quality,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="goodsId != null" >
        goods_id,
      </if>
      <if test="merchantId != null" >
        merchant_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="date != null" >
        #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="avgGrade != null" >
        #{avgGrade,jdbcType=REAL},
      </if>
      <if test="speed != null" >
        #{speed,jdbcType=REAL},
      </if>
      <if test="quality != null" >
        #{quality,jdbcType=REAL},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null" >
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="merchantId != null" >
        #{merchantId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.abovesky.shopping.domain.Remark" >
    update remark
    <set >
      <if test="date != null" >
        date = #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="avgGrade != null" >
        avg_grade = #{avgGrade,jdbcType=REAL},
      </if>
      <if test="speed != null" >
        speed = #{speed,jdbcType=REAL},
      </if>
      <if test="quality != null" >
        quality = #{quality,jdbcType=REAL},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null" >
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="merchantId != null" >
        merchant_id = #{merchantId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.abovesky.shopping.domain.Remark" >
    update remark
    set date = #{date,jdbcType=TIMESTAMP},
      avg_grade = #{avgGrade,jdbcType=REAL},
      speed = #{speed,jdbcType=REAL},
      quality = #{quality,jdbcType=REAL},
      content = #{content,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      goods_id = #{goodsId,jdbcType=INTEGER},
      merchant_id = #{merchantId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="findPageBreakByCondition" resultMap="BaseResultMap" parameterType="map">
        SELECT
            <if test="(merchantId == null or merchantId == 0) and type == null">
                merchant.store_name store_name,
                remark.goods_id,
            </if>
            remark.id,
            remark.date,
            remark.avg_grade,
            remark.speed,
            remark.quality,
            remark.content,
            goods.name goods_name,
            user.nickname user_nickname
        FROM
          remark
        INNER JOIN goods ON (remark.goods_id = goods.id and goods.status = 'ACTIVE')
        INNER JOIN user ON (remark.user_id = user.id and user.status = 'ACTIVE')
        <if test="(merchantId == null or merchantId == 0) and type == null">
            inner join merchant on (merchant.id = remark.merchant_id and merchant.status = 'ACTIVE')
        </if>
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="merchantId != null and merchantId != 0">
                AND remark.merchant_id = #{merchantId}
            </if>
            <if test="startDate != null">
                AND remark.date &gt;= #{startDate}
            </if>
            <if test="endDate != null">
                AND remark.date &lt;= #{endDate}
            </if>
            <if test="type != null">
                AND goods.id = #{type}
            </if>
            <if test="(merchantId == null or merchantId == 0) and type == null">
                <if test="keywords != null">
                    and goods.name like "%"#{keywords}"%"
                </if>
                <if test="keywords2 != null">
                    and merchant.store_name like "%"#{keywords2}"%"
                </if>
            </if>
        </trim>
        <choose>
            <when test="orderField !=null and orderField !=''">
                ORDER BY ${orderField} <if test="orderDirection != null and orderDirection != ''">${orderDirection}</if>
            </when>
            <otherwise>
                order by remark.date DESC
            </otherwise>
        </choose>
    </select>
    <select id="getTotalCount" resultType="int" parameterType="map">
        SELECT
        count(0)
        FROM
        remark
        INNER JOIN goods ON (remark.goods_id = goods.id and goods.status = 'ACTIVE')
        INNER JOIN user ON (remark.user_id = user.id and user.status = 'ACTIVE')
        <if test="(merchantId == null or merchantId == 0) and type == null">
            inner join merchant on (merchant.id = remark.merchant_id and merchant.status = 'ACTIVE')
        </if>
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="merchantId != null and merchantId != 0">
                AND remark.merchant_id = #{merchantId}
            </if>
            <if test="startDate != null">
                AND remark.date &gt;= #{startDate}
            </if>
            <if test="endDate != null">
                AND remark.date &lt;= #{endDate}
            </if>
            <if test="type != null">
                AND goods.id = #{type}
            </if>
            <if test="(merchantId == null or merchantId == 0) and type == null">
                <if test="keywords != null">
                    and goods.name like "%"#{keywords}"%"
                </if>
                <if test="keywords2 != null">
                    and merchant.store_name like "%"#{keywords2}"%"
                </if>
            </if>
        </trim>
    </select>
</mapper>